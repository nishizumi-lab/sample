import numpy as np
import matplotlib.pyplot as plt
import csv


def save_csv(SAVE_CSV_PATH, data):
    with open(SAVE_CSV_PATH, 'w', newline='') as file:
        writer = csv.writer(file, delimiter=',')
        writer.writerows(data)

# 剛性マトリクス生成
def stf1(el, EI, EA, ip1, ip2):
    # 2つの節点(i, j)ともに回転拘束でなければ
    if ip1==0 and ip2==0:
        #  剛性マトリクス(回転拘束状態にかかわらず共通な部分)
        stf = [[EA/el,  0, 0, -EA/el, 0, 0],
            [0,      0, 0, 0,      0, 0],
            [0,      0, 0, 0,      0, 0],
            [-EA/el, 0, 0, EA/el,  0, 0],
            [0,      0, 0, 0,      0, 0],
            [0,      0, 0, 0,      0, 0]]
    # 2つの節点(i, j)が回転拘束であれば
    elif ip1 ==1 and ip2 ==1:
        stf = [[ EA/el,          0,            0, -EA/el,            0,           0],
               [     0, 12*EI/el**3,  6*EI/el**2,      0, -12*EI/el**3,  6*EI/el**2],
               [     0,  6*EI/el**2,     4*EI/el,      0,  -6*EI/el**2,     2*EI/el],
               [-EA/el,          0,            0,  EA/el,            0,           0],
               [     0,-12*EI/el**3, -6*EI/el**2,      0,  12*EI/el**3, -6*EI/el**2],
               [     0,  6*EI/el**2,     2*EI/el,      0,  -6*EI/el**2,    4*EI/el]]
    # 2つの節点(i, j)のうち、節点iだけが回転拘束であれば
    elif ip1 ==1 and ip2 ==0:
        stf = [[ EA/el,            0,  0, -EA/el,           0,           0],
               [     0,   3*EI/el**3,  0,      0, -3*EI/el**3,  3*EI/el**2],
               [     0,            0,  0,      0,           0,           0],
               [-EA/el,            0,  0,  EA/el,           0,           0],
               [     0,  -3*EI/el**3,  0,      0,  3*EI/el**3, -3*EI/el**2],
               [     0,   3*EI/el**2,  0,      0, -3*EI/el**2,     3*EI/el]]
    # 2つの節点(i, j)のうち、節点jだけが回転拘束であれば
    elif ip1 ==0 and ip2 ==1:
        stf = [[EA/el, 0, 0, -EA/el, 0, 0],
               [0, 3*EI/el**3, 3*EI/el**2, 0, -3*EI/el**3, 0],
               [0, 3*EI/el**2, 3*EI/el, 0, -3*EI/el**2, 0],
               [-EA/el, 0, 0, EA/el, 0, 0],
               [0, -3*EI/el**3, -3*EI/el**2, 0, 3*EI/el**3, 0],
               [0, 0, 0, 0, 0, 0]]
    return stf


def main():
    node = 7 # 節点数
    mem = 8  # 部材数
    nlmax = 0 # 節点荷重数
    blmax = 20 # 部材荷重数
    gmax = 2   # 材料数
    icase = 4  # 荷重ケース数
    jcomb = 3  # 荷重組合せ数


    # 材料リスト(E,A,I)
    gose = [[70000, 70000],
            [450, 323],
            [354397, 128832]]

    #print(gose[2][1]) # 128832

    Lcase = ["G", "W(+)", "W(-)", "S"] 

    lcomb = [["G+W(+)", "G+W(-)", "G+S"],
            [1, 1, 1],
            [1, 0, 0],
            [0, 1, 0],
            [0, 0, 1]] 

    xz = [[638.9911, 3542.642, 0, 638.9911, 2090.816,3542.642,4181.633], # X
            [0, 0, 198.4265, 431, 959.4207, 1488, 1720.574], # Z
            [1, 1, 0, 0 , 0, 0, 0],
            [0, 0, 0, 0 , 0, 0, 0],
            [1, 1, 0, 0 , 0, 0, 0],
            [0, 0, 0, 0 , 0, 0, 0],
            [0, 0, 0, 0 , 0, 0, 0],
            [0, 0, 0, 0 , 0, 0, 0]]

    # 部材
    # 接続節点(i, j), 回転拘束(i, j), 材料番号
    buzai = [[1, 2, 1, 2, 3, 4, 5, 6],
            [4, 6, 5, 5, 4, 5, 6, 7],
            [1, 1, 0, 0, 1, 1, 1, 1],
            [0, 0, 0, 0, 1, 1, 1, 1],
            [2, 2, 2, 2, 1, 1, 1, 1]]

    # 部材荷重(ケースNo、部材番号、タイプ、W/P、集中荷重点、θdeg)
    bload = [[1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4],
            [5, 6, 6, 7, 8, 5, 6, 6, 7, 8, 5, 6, 6, 7, 8, 5, 6, 6, 7, 8],
            [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
            [203.3096, 406.6193, 406.6193, 406.6193, 203.3096, 2277.947, 4555.894, 4555.894, 4555.894, 2277.947,2933.9966, 5867.991, 5867.991, 5867.991, 2933.996, 2336.25, 4672.5, 4672.5, 4672.5, 2336.25],
            [87, 476, 1544, 1069, 593, 87, 476, 1544, 1069, 593, 87, 476, 1544, 1069, 593, 87, 476, 1544, 1069, 593],
            [-110, -110, -110, -110, -110, -90, -90, -90, -90, -90, 90, 90, 90, 90, 90,-110,-110,-110,-110,-110]]

    #
    grfs = [[0, 0, 0, 0, 0, 0, 0, 0 , 0, 0, 0, 0 , 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0 , 0, 0, 0, 0 , 0, 0, 0]]


    # 二次元配列の生成(3*接点数, 3*接点数)
    st = [[0 for i in range(node)] for j in range(node)]
    
    stfs = []

    for M in range(mem):
        # 各部材の接続節点(i, j)を取得
        ia1 = buzai[0][M]
        ia2 = buzai[1][M]
        # 各部材の接続節点(i, j)の回転拘束状態を取得(0=非拘束、1=拘束)
        ip1 = buzai[2][M]
        ip2 = buzai[3][M]
        # 各部材の材料番号を取得
        ig = buzai[4][M]
        # 部材番号から各部材のEIとEAを算出
        EI = gose[0][ig-1] * gose[2][ig-1]
        EA = gose[0][ig-1] * gose[1][ig-1]

        # 各部材のi節点の座標を取得
        x1 = xz[0][ia1-1]
        z1 = xz[1][ia1-1]

        # 各部材のj節点の座標を取得
        x2 = xz[0][ia2-1]
        z2 = xz[1][ia2-1]

        el = ((x2-x1)**2 + (z2-z1)**2)**0.5

        stf = stf1(el, EI, EA, ip1, ip2)
        print(stf)
        print(ip1)
        print(ip2)
        print('--------------')
        stfs.extend(stf)

    SAVE_CSV_PATH = "/Users/github/sample/python/structural-mechanics/02_frame2d/sample01/stf1.csv"
    save_csv(SAVE_CSV_PATH, stfs)
"""
10
[[52459.39675174014, 0, 0, -52459.39675174014, 0, 0],
[0, 0.8472079190746197, 0, 0, -0.8472079190746197, 365.14661312116107],
[0, 0, 0, 0, 0, 0], [-52459.39675174014, 0, 0, 52459.39675174014, 0, 0],
[0, -0.8472079190746197, 0, 0, 0.8472079190746197, -365.14661312116107],
[0, 365.14661312116107, 0, 0, -365.14661312116107, 157378.19025522043]]
--------------
10
[[15194.89247311828, 0, 0, -15194.89247311828, 0, 0],
[0, 0.020587946140519696, 0, 0, -0.020587946140519696, 30.634863857093304], 
[0, 0, 0, 0, 0, 0], 
[-15194.89247311828, 0, 0, 15194.89247311828, 0, 0], 
[0, -0.020587946140519696, 0, 0, 0.020587946140519696, -30.634863857093304], 
[0, 30.634863857093304, 0, 0, -30.634863857093304, 45584.67741935484]]
--------------
00
[[12992.786097051661, 0, 0, -12992.786097051661, 0, 0], 
[0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0], 
[-12992.786097051661, 0, 0, 12992.786097051661, 0, 0], 
[0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0]]
--------------
00
[[12992.779245128437, 0, 0, -12992.779245128437, 0, 0], 
[0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0], 
[-12992.779245128437, 0, 0, 12992.779245128437, 0, 0], 
[0, 0, 0, 0, 0, 0], 
[0, 0, 0, 0, 0, 0]]
--------------
11
[[46323.526467382755, 0, 0, -46323.526467382755, 0, 0], 
[0, 1.2021674890645178, 408.7369722617735, 0, -1.2021674890645178, 408.7369722617735], 
[0, 408.7369722617735, 185294.10586953102, 0, -408.7369722617735, 92647.05293476551], 
[-46323.526467382755, 0, 0, 46323.526467382755, 0, 0], 
[0, -1.2021674890645178, -408.7369722617735, 0, 1.2021674890645178, -408.7369722617735], 
[0, 4.229441262557977e-49, 92647.05293476551, 0, -408.7369722617735, 185294.10586953102]]
--------------
11
[[20388.353885806064, 0, 0, -20388.353885806064, 0, 0], 
[0, 0.1024959317726197, 79.17809031864063, 0, -0.1024959317726197, 79.17809031864063], 
[0, 79.17809031864063, 81553.41554322426, 0, -79.17809031864063, 40776.70777161213], 
[-20388.353885806064, 0, 0, 20388.353885806064, 0, 0], 
[0, -0.1024959317726197, -79.17809031864063, 0, 0.1024959317726197, -79.17809031864063], 
[0, 3.1469800605201647e-56, 40776.70777161213, 0, -79.17809031864063, 81553.41554322426]]
--------------
11
[[20387.62434945825, 0, 0, -20387.62434945825, 0, 0], 
[0, 0.10248492963395761, 79.17242411707102, 0, -0.10248492963395761, 79.17242411707102], 
[0, 79.17242411707102, 81550.497397833, 0, -79.17242411707102, 40775.2486989165], 
[-20387.62434945825, 0, 0, 20387.62434945825, 0, 0], 
[0, -0.10248492963395761, -79.17242411707102, 0, 0.10248492963395761, -79.17242411707102], 
[0, 3.1447287202709726e-56, 40775.2486989165, 0, -79.17242411707102, 81550.497397833]]
--------------
11
[[46323.521219144146, 0, 0, -46323.521219144146, 0, 0], 
[0, 1.2021670804647244, 408.73687964580915, 0, -1.2021670804647244, 408.73687964580915], 
[0, 408.73687964580915, 185294.08487657658, 0, -408.73687964580915, 92647.04243828829], 
[-46323.521219144146, 0, 0, 46323.521219144146, 0, 0], 
[0, -1.2021670804647244, -408.73687964580915, 0, 1.2021670804647244, -408.73687964580915], 
[0, 4.2294316790505345e-49, 92647.04243828829, 0, -408.73687964580915, 185294.08487657658]]
"""
main()


